# name: CMake

# on: [push]

# env:
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

# jobs:
#   build:
#     strategy:
#       matrix:
#         os: [ubuntu-latest] # os: [ubuntu-latest, macos-latest]
#         linkage: [dynamic, static]

#     # The CMake configure and build commands are platform agnostic and should work equally
#     # well on Windows or Mac.  You can convert this to a matrix build if you need
#     # cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ${{matrix.os}}

#     steps:
#     - uses: actions/checkout@v3

#     - name: Create Build Environment
#       # Some projects don't allow in-source building, so create a separate build directory
#       # We'll use this as our working directory for all subsequent commands
#       run: cmake -E make_directory ${{github.workspace}}/build

#     - name: Install dependencies (Ubuntu)
#       if: ${{matrix.os == 'ubuntu-latest'}}
#       run: |
#         sudo apt-get remove nginx libgd3
#         sudo apt-get install libmad0-dev libid3tag0-dev libsndfile1-dev libgd-dev libboost-filesystem-dev libboost-program-options-dev libboost-regex-dev

#     - name: Install dependencies (MacOS)
#       if: ${{matrix.os == 'macos-latest' && matrix.linkage == 'dynamic'}}
#       run: |
#         brew install mad libgd boost libpng zlib libsndfile libid3tag

#     - name: Install dependencies (MacOS)
#       if: ${{matrix.os == 'macos-latest' && matrix.linkage == 'static'}}
#       run: |
#         brew install mad libgd boost libpng zlib

#     - name: Install Googletest
#       shell: bash
#       working-directory: ${{github.workspace}}
#       run: |
#         wget https://github.com/google/googletest/archive/release-1.12.1.tar.gz
#         tar xzf release-1.12.1.tar.gz
#         ln -s googletest-release-1.12.1 googletest

#     - name: Install libsndfile
#       if: ${{matrix.os == 'macos-latest' && matrix.linkage == 'static'}}
#       run: |
#         wget https://github.com/libsndfile/libsndfile/archive/refs/tags/1.1.0.tar.gz
#         tar xzf 1.1.0.tar.gz
#         cd libsndfile-1.1.0
#         mkdir build
#         cd build
#         cmake -D ENABLE_MPEG=0 -D ENABLE_TESTING=0 -D BUILD_SHARED_LIBS=0 -D BUILD_REGTEST=0 -D BUILD_PROGRAMS=0 -D BUILD_TESTING=0 -D BUILD_EXAMPLES=0 ..
#         make
#         sudo make install

#     - name: Install libid3tag
#       if: ${{matrix.os == 'macos-latest' && matrix.linkage == 'static'}}
#       run: |
#         wget http://sourceforge.net/projects/mad/files/libid3tag/0.15.1b/libid3tag-0.15.1b.tar.gz
#         tar xzf libid3tag-0.15.1b.tar.gz
#         cd libid3tag-0.15.1b
#         ./configure --enable-static
#         make
#         sudo make install

#     - name: Configure CMake
#       # Use a bash shell so we can use the same syntax for environment variable
#       # access regardless of the host operating system
#       shell: bash
#       working-directory: ${{github.workspace}}/build
#       # Note the current convention is to use the -S and -B options here to specify source
#       # and build directories, but this is only available with CMake 3.13 and higher.
#       # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
#       run: cmake $GITHUB_WORKSPACE -D CMAKE_BUILD_TYPE=$BUILD_TYPE -D BUILD_STATIC=${{matrix.linkage == 'static'}}

#     - name: Build
#       working-directory: ${{github.workspace}}/build
#       shell: bash
#       # Execute the build.  You can specify a specific target with "--target <NAME>"
#       run: |
#         export LIBRARY_PATH=${LIBRARY_PATH}:/usr/local/opt/icu4c/lib
#         cmake --build . --config $BUILD_TYPE

#     - name: Test (Ubuntu)
#       if: ${{matrix.os == 'ubuntu-latest'}}
#       working-directory: ${{github.workspace}}/build
#       shell: bash
#       run: ./audiowaveform_tests --gtest_filter=-ProgressReporterTest.*

#     - name: Test (MacOS)
#       if: ${{matrix.os == 'macos-latest'}}
#       working-directory: ${{github.workspace}}/build
#       shell: bash
#       run: ./audiowaveform_tests --gtest_filter=-ProgressReporterTest.*:*Opus*
